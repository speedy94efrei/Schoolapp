const request = require("supertest");
const app = require("../server");

let id_utilisateur_test; // Variable pour stocker un utilisateur crÃ©Ã© durant les tests

describe("Gestion des utilisateurs", () => {

    // ğŸ”¹ Test d'ajout d'un utilisateur
    test("Ajout d'un nouvel utilisateur", async () => {
        const res = await request(app).post("/api/utilisateur").send({
            nom: "Dupont",
            prenom: "Jean",
            email: "jean.dupont@example.com",
            motdepasse: "MotDePasse123!",
            role: "professeur"
        });

        console.log("ğŸ“Œ RÃ©ponse du serveur :", res.body); // âœ… Voir si l'utilisateur est bien ajoutÃ©

        expect(res.status).toBe(201); // âœ… VÃ©rifie si le statut est 201 (CrÃ©Ã©)
        expect(res.body.utilisateur).toHaveProperty("id_utilisateur"); // âœ… VÃ©rifie que l'ID est retournÃ©
        id_utilisateur_test = res.body.utilisateur.id_utilisateur; // âœ… Stocke l'ID du nouvel utilisateur
    });

    // ğŸ”¹ Test de rÃ©cupÃ©ration des utilisateurs
    test("RÃ©cupÃ©ration des utilisateurs", async () => {
        const res = await request(app).get("/api/utilisateur");

        expect(res.status).toBe(200); // âœ… VÃ©rifie si le statut est 200 (OK)
        expect(Array.isArray(res.body)).toBe(true); // âœ… VÃ©rifie si c'est un tableau
        expect(res.body.length).toBeGreaterThan(0); // âœ… VÃ©rifie qu'il y a au moins un utilisateur
        expect(res.body[0]).toHaveProperty("id_utilisateur"); // âœ… VÃ©rifie que chaque utilisateur a un ID
        expect(res.body[0]).toHaveProperty("nom"); // âœ… VÃ©rifie que chaque utilisateur a un nom
        expect(res.body[0]).toHaveProperty("prenom"); // âœ… VÃ©rifie que chaque utilisateur a un prÃ©nom
        expect(res.body[0]).toHaveProperty("email"); // âœ… VÃ©rifie que chaque utilisateur a un email
    });

    // ğŸ”¹ Test de suppression d'un utilisateur
    test("Suppression d'un utilisateur", async () => {
        if (!id_utilisateur_test) {
            console.warn("Aucun utilisateur n'a Ã©tÃ© crÃ©Ã© pour tester la suppression !");
            return;
        }

        const res = await request(app).delete(`/api/utilisateur/${id_utilisateur_test}`);

        expect(res.status).toBe(200); // âœ… VÃ©rifie si le statut est 200 (OK)
        expect(res.body.message).toBe("Utilisateur supprimÃ© avec succÃ¨s"); // âœ… VÃ©rifie le message de confirmation
    });
});
